{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2J"
     ]
    }
   ],
   "source": [
    "clear all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import nibabel as nib\n",
    "import os\n",
    "import numpy as np\n",
    "import scipy.io as sio\n",
    "import scipy.optimize\n",
    "from Tkinter import Tk\n",
    "from tkFileDialog import askdirectory\n",
    "import libtiff \n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/media/sophie/72eb68c4-a184-4801-9224-2381f58ad9fe/945ss2\n"
     ]
    }
   ],
   "source": [
    "Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing\n",
    "foldername = askdirectory() # show an \"Open\" dialog box and return the path to the selected file\n",
    "print(foldername)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "path=foldername"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "A=foldername.split('/')\n",
    "Dataname=A[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'945ss2'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dataname"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Open the images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "t = libtiff.TiffFile(path+'/'+Dataname+'-00001.tif') \n",
    "tt = t.get_tiff_array() \n",
    "t.close()\n",
    "S=tt.shape\n",
    "data=np.zeros([S[0],S[1],S[2],len(os.listdir(path))])\n",
    "#for i in range(1,15000):\n",
    "for i in range(len(os.listdir(path))):       \n",
    "#for fn in os.listdir(path):\n",
    "    t = libtiff.TiffFile(path+'/'+Dataname+'-'+str(i+1).zfill(5)+'.tif') \n",
    "    #t = libtiff.TiffFile(path+fn) \n",
    "    tt = t.get_tiff_array()\n",
    "    data[:,:,:,i]=tt[:][:][:]\n",
    "    t.close()\n",
    "    i=i+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(40, 208, 208, 6033)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S=data.shape\n",
    "S"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find end of onset of light and begining of offset (to align to behavior) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate average time series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "M=np.mean(np.mean(np.mean(data,0),0),0)\n",
    "Mav=M.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f553865e7d0>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n821PO3BgtjyUSsW4H/1olAuOP9599erm5aCHH473Mq+vvLJ5aWDJkvZjfeqpKB995jPZeUyaFOWk\nxsYY58MPo4SUu9xvfjMejzmm+fyuvTZ+u732cr/55hjn4oujPLRmjft99xX/Pbq733BDzOMHP8gu\n+0tf6tg88lm/vrQlq0WL3CdPjj939099yv2vf2093rhx7nvv7X700bGeDBvm3rt39v2nn44TBlrG\nusMO7q++2n4MZ5/tfscdrYfff398bx/5SP7pzjzT/a67mg/74Q/jN87nrbfif3P9+ihV5paPvvzl\nWNbEie3HmvHee8WNJ61RwvJOVST9vn2rK+l31EUXxT9Oxocfxj/IzTe7T53a9nS33+5+xRXxfPly\n9wMPjF9k7lz3rbd2v/POSCj5EtaECTHuT38ar5cujdeZmmtLq1e7b7FFNpk+/bT7gw9mX7c0a1YM\nr6uLxwED4ndavTo7zn/9l/tVV0U9G6Lmm5nfgAHxeOCB7v/2b+1/fxlDh2bPioLssYahQ91feKG4\neeRqaorfYpttYj4XXtj59ezZZ93POsv94IObbxCHD89+n/msXh2Jvlev7DTvvBPv/elP7iec0Hqa\n8893/5//aT+ek06K36+lpib32bNjOffck92Yf/CB+x/+EMMff7z5NDNmxEai5XrW1JSNuW/f2Bi1\n9N3vun//++3H6p5twHz96/E7/O537t/+dmw4Fi6M9becZs50/9nPanfD0yWT/sqVm/y9VMxTT7nv\ntlv2Myxa5L7zzh2fz7PPRguuqcn92GPd99gjTsVrywMPxB6CeyRLcN933/wbiSuvdP/iF+P5++/H\nY2Nj/ANeckn++dfXx0HrDRti3FNPdf/e99wvvTT2Br74Rfdf/zrGzSzzoYfcL7ss2+rPJI1CLdcF\nC9z798/uZW3YEPOcNcvdLObRsoVayI9+lF3+SSfF4w47xONFF8V39eab8RkLOf74mG7YMPettorn\nhx2Wnf/rr7c9bWacmTNjA9ijR/zWt97qfs45rcefNMn98MPbj+fjH3d/4om23586Nbvcl1+OA7+Z\nPYA1a5qP29QUJzD885+t48htKOT7933wQfdPf7r9WHM3Hvn+hg2Lx499LNaf3/wmYnzlldjDuOmm\n7Mars0aOjGV0pvFQDZT0q9DXvx4rVmOj+/PPu++336bN7+6749d54IG2x3n//WjFrlgRpZSTT3bf\nf//8pYahQ/OfidQRzz0XMZ16avYfdtKk/ONmWrOvvBJnh7QsRcyb17zVPW6c+7//e/55rV3r3qdP\nLK/YMs2dd8bexve/H8/d3adPb53EoLjfap99YvpMPMuXxxkwX/hCnFXVXlxPPJHdKCxd6v7Zz2aX\n/d//3Xr8devcd9opWuztxdPe++6xpzlgQKyX//qv0belLV/7Wuy1Zdx9d5T9MiWsxx6Ls5Jaeuut\n+P9tr4/Aww/Hns7KlbEhfv316Nfw3nuxfmy9dXyPu+6a/V6+8IV4vOWWeLz77vjfyqxXHTF/vvt2\n29VuK9+9Cyb9Pn1qP+mvWxet82OPjSRz9NGbNr+mpmi9F+pwc/LJsat8443uX/1qtB5PPLF1bHV1\nxXfCaU+mxTVxYuEWbsbNN7ufe2729YYN2RZeJlledVXs7relqcl9zz2LO53RPVqNDz+c/73ly6Pc\nsWBBJJP+/Vsfk8n19tuxjm5qazPXxInuo0ZFDPnU17d/PGPHHWMvpZDFi90328wLns45aVI0DJYu\nje9i773d/+//Cs/fPbv3lO/U5VWr3HfZJTbqxRg71v0nP2m+Uf74x5u/brmnUsjo0fG/UcuU9KvU\n2rXZA63F9qzcVOPGRc0YIlGsWROtu299K5vkX3stdt9LrdhW9+zZ0YrLxPPWW3EA+IADssngggsK\nJ5krr4zPVcjatVGCKTY5XHJJlKTacv/9cXwhScuWxYH+CRNav9fYGMeMit2Iz5sXfVDas2FDtPZz\nk2sxPXzd4xjUyJFx/KnlhnH8+BjeUVdcERufO++M4zJ33ZU9LpLpn1Cs44+P37CWdcmk314Hp1oz\nd27UopPQ1OQ+bVrU2jOdvWbPjk4+Q4dGWeXCC6O1VylNTfGPN2pUvH722ejG/8QTsYF67bVIGuPH\ntz+fefNijS3Uwp0+PT57sebOdd9++5h/vtb8pZdGWSJpjz4acd1/f/MN7IwZ5dmIb9gQv82DD3b8\n8zY2uh91lPs3vtH8YP8PfhANoVKZMyeOlxW7QXKP422luFxLJSnpS0EffBC7yccdF7/yBRdUNp6F\nC90HD47kf9FF2RLUtddGi7ZPn/w9lFv6znfiQOjw4THdV77SOgHcdlv7p8rmM2pUfE+DBsUZJZn6\nvXvskbR30LScHnkkDjgffngc9P3e9+LYR3sH+Ctl8WL300+Pvbh7740N1Xnnuf/qV6VdzvDh8RsX\nY80a9y23LG1prhJKmfQt5pcMM/N8y+vTJzp+9O2bWChSAatWwR/+EDe7qa+PK6BC3JlsxYq4eX0h\njY1xuewtt4wixF13RaewXXaJznJDhkRnsbPOit7LHbF2LTz1VPQyve666IjUq1dch2nJkujQVAnr\n10dnvfnzo/PcVlvBvffCNttUJp5CnnwyrglUVxfXpnrqKRg+vHTznz49rmd13HFxRdLBg+PueJMn\nR+e2zTfPjvv887EuzJ5duuVXgpnh7iXpwlo1Sf+NN+JRpCPcI8kvWABvvhm9XCdMiHsl9+/f+fmu\nWBG9V+fMiQ3KEe1eMFxaamyMHud9+kSv3VJbtSp6sY8ZE72hlyyJns377AP77hsNgKVLY6NzyCHw\n61+XPoYkKemLiBB7QfPnx8Z/jz3irl7LlsWlRnbdNVr9qVTt55Yul/S32SYuBFXrP4yISDmUMunr\ngmsiIt1I1SR9EREpv4JJ38xuM7MlZjaznXF+bmYvmdkMMzuotCGKiEipFNPSvwMY0dabZnY8cW/c\nPYk7av2io0EkeFhBRKRbK+bOWU8CK9sZ5RTgN+lxnwb6mtlOHQ1ENX0RkfIrRU1/ILAw5/Wi9DAR\nEakyVXEgV+UdEZFk9CzBPBYBg3Je75oelld95g7gQCqVIpVKASrviIhkNDQ00JB7o+USKqpzlpnt\nDvzJ3ffP894JwNfc/UQzGw5c7+55r7TRVues3r3j5ty9e3cwehGRbqCUnbMKtvTNbCyQArY3swXA\nKKCOuOrbGHefYGYnmNnLwBrgvFIEJiIipVcVl2Ho1SsujqSWvohIa7oMg4iIdErVJH0RESm/qkj6\nOmVTRCQZVZH0QeUdEZEkVE3SFxGR8lPSFxHpRqoi6aumLyKSjKpI+qCavohIEqom6YuISPlVRdJX\neUdEJBlVkfRB5R0RkSRUTdIXEZHyq4qkr/KOiEgyqiLpg8o7IiJJqJqkLyIi5aekLyLSjRSV9M1s\npJnNNbMXzeyyPO8PMrNHzWyamc0ws+M7EoRq+iIiySh45ywz6wG8CBwLLAamAme4+9yccX4JTHP3\nX5rZUGCCu38kz7zy3jlr883h/ffjUUREmkv6zlnDgJfcfb67rwfGAae0GKcJ6JN+vi2wqBTBiYhI\naRW8MTowEFiY8/oNYkOQazQw2cy+AfQCPtWRIFTeERFJRqkO5J4J3OHug4ATgd92dAY6ZVNEpPyK\naekvAnbLeb0rrcs3XwJGALj7FDPb0sz6u/uyljOrr6/f+DyVSpFKpToYsohI19bQ0EBDQ0NZ5l3M\ngdzNgHnEgdw3gWeAM919Ts44fwHudvc70wdyH3L3XfPMK++B3J494cMP41FERJpL9ECuu28ALgYm\nA7OBce4+x8xGm9lJ6dG+DZxvZjOA3wHndCQI1fRFRJJRsKVf0oW10dLfbDNYty4eRUSkuaRP2RQR\nkS6iKpK+yjsiIsmoiqQPOmVTRCQJVZP0RUSk/JT0RUS6kapI+qrpi4gkoyqSPqimLyKShKpJ+iIi\nUn5K+iIi3UjVJH2Vd0REyq9qkr6IiJSfkr6ISDdS8aSv0zVFRJJT8aQvIiLJUdIXEelGKp70Vd4R\nEUlOUUnfzEaa2Vwze9HMLmtjnM+Z2Wwzm2VmHboxuk7XFBFJRjH3yO0BvEjcI3cxMBU4w93n5owz\nBPgDcIy7r27rpuj57pzV1BT3xm1q2uTPIiLSJSV956xhwEvuPt/d1wPjgFNajHM+cJO7rwbIl/Db\novKOiEhyikn6A4GFOa/fSA/LtRewt5k9aWb/MLMRHQlC5R0RkWT0LOF8hgBHAbsBj5vZv2Ra/rnq\n6+s3Pk+lUhx5ZKpEIYiIdA0NDQ00NDSUZd7F1PSHA/XuPjL9+nLA3f2anHFuAaa4+53p1w8Dl7n7\ncy3m1aqmv2ED1NXFo4iItJZ0TX8qMMTMBptZHXAGML7FOA8Ax6SD6w/sCbxaTACq6YuIJKdg0nf3\nDcDFwGRgNjDO3eeY2WgzOyk9ziRguZnNBh4Bvu3uK4sNQjV9EZFkFCzvlHRheco7jY2w5ZbxKCIi\nrSVd3ikrlXdERJJT8aQPKu+IiCSlKpK+iIgkQ0lfRKQbqXjSV01fRCQ5FU/6oJq+iEhSqiLpi4hI\nMiqe9FXeERFJTsWTPqi8IyKSlKpI+iIikgwlfRGRbqTiSV81fRGR5FQ86YNq+iIiSamKpC8iIsmo\neNJXeUdEJDkVT/qg8o6ISFKKSvpmNtLM5prZi2Z2WTvj/T8zazKzQ0oXooiIlErBpG9mPYAbgRHA\nfsCZZrZPnvG2Br4BTOlIACrviIgkp5iW/jDgJXef7+7rgXHAKXnG+yFwNbC2o0GovCMikoxikv5A\nYGHO6zfSwzYys4OBXd19YgljExGREuu5qTMwMwOuA87JHdzW+PX19Rufp1Iphg1LbWoIIiJdSkND\nAw0NDWWZt3mBorqZDQfq3X1k+vXlgLv7NenXfYCXgfeIZL8zsBw42d2ntZiXt1zemjWwww7w/vul\n+UAiIl2NmeHuJSmEF9PSnwoMMbPBwJvAGcCZmTfdfTWwY05wjwGXuPv0YoNQTV9EJBkFa/ruvgG4\nGJgMzAbGufscMxttZiflm4R2yjsiIlI5Bcs7JV1YnvLOe+/BTjtFmUdERForZXlHPXJFRLqRqkj6\nIiKSDCV9EZFupOJJX5dhEBFJTsWTPqimLyKSlKpI+iIikoyKJ32Vd0REklPxpA8q74iIJKUqkr6I\niCRDSV9EpBupeNJXTV9EJDkVT/qgmr6ISFKqIumLiEgyKp70Vd4REUlOxZM+qLwjIpKUqkj6IiKS\njKKSvpmNNLO5ZvaimV2W5/1vmdlsM5thZg+Z2aDShyoiIpuqYNI3sx7AjcAIYD/gTDPbp8Vo04BD\n3f0g4D7gf4sNQDV9EZHkFNPSHwa85O7z3X09MA44JXcEd/+bu3+YfjkFGNiRIFTTFxFJRjFJfyCw\nMOf1G7Sf1L8ETNyUoEREpDx6lnJmZvYF4FDg6LbGqa+v3/g8lUpxwAGpUoYgIlLzGhoaaGhoKMu8\nzQsU1c1sOFDv7iPTry8H3N2vaTHep4AbgKPcfXkb8/KWy1uxAoYMiUcREWnNzHD3khTCiynvTAWG\nmNlgM6sDzgDGtwjoYOAXwMltJXwREam8gknf3TcAFwOTgdnAOHefY2ajzeyk9Gj/A/QG7jGz6Wb2\nQLEB6OwdEZHkFCzvlHRheco7y5fDXnvFo4iItJZ0eUdERLoIJX0RkW6k4klfNX0RkeRUPOmDeuSK\niCSlKpK+iIgko+JJX+UdEZHkVDzpg8o7IiJJqYqkLyIiySjpBdeK8eijzV8vXQrLliUdhYhI95R4\nj9xjjmm+vPXr44Jrd9yRWBgiIjWllD1yK34ZBhERaZ8uwyAiIp2ipC8i0o0o6YuIdCNK+iIi3UhR\nSd/MRprZXDN70cwuy/N+nZmNM7OXzOwpM9ut9KGKiMimKpj0zawHcCMwAtgPONPM9mkx2peAFe6+\nJ3A9cSetLqdcNypOiuKvrFqOv5Zjh9qPv5SKaekPA15y9/nuvh4YB5zSYpxTgDvTz+8Fji1diNWj\n1lccxV9ZtRx/LccOtR9/KRWT9AcCC3Nev5Eelnec9D11V5nZdiWJUERESqZcB3J1CTURkSpUsEeu\nmQ0H6t19ZPr15YC7+zU540xMj/O0mW0GvOnuO+aZl7rjioh0Qql65BZzwbWpwBAzGwy8CZwBnNli\nnD8B5wCorupjAAAE4ElEQVRPA6cBLS6rFkoVtIiIdE7BpO/uG8zsYmAyUQ66zd3nmNloYKq7/xm4\nDbjLzF4ClhMbBhERqTKJXnBNREQqK7EeuYU6eFWKmd1mZkvMbGbOsH5mNtnM5pnZJDPrm/Pez9Od\n0GaY2UE5w89Jf7Z5ZnZ2QrHvamaPmtlsM5tlZt+osfi3MLOnzWx6Ov5R6eG7m9mUdDy/N7Oe6eFt\ndgI0s++mh88xs08nEX96uT3MbJqZja+12NPLft3Mnk//Bs+kh9XK+tPXzO5Jf2+zzezwGop9r/R3\nPi39+I6ZfSOR+N297H/ExuVlYDCwOTAD2CeJZRcR2xHAQcDMnGHXAN9JP78MuDr9/HjgL+nnhwNT\n0s/7Aa8AfYFtM88TiH1n4KD0862BecA+tRJ/etm90o+bAVPScf0BOC09/BbggvTzC4Gb089PB8al\nn+8LTCfKlbun1zVLKP5vAb8Fxqdf10zs6eW/CvRrMawm1h/g18B56ec908uvidhbfI4ewGJgUBLx\nJ/WhhgMTc15fDlyW5BdbIL7BNE/6c4Gd0s93Buakn/8COD1nvDnATsQxjFtyht+SO16Cn+MB4FO1\nGD/QC3iW6Az4NtCj5boD/BU4PP18M+DtfOsTMDEzXplj3hV4CEiRTfpLayH2nOW9BmzfYljVrz9A\nH+CVPMOrPvY8MX8aeCKp+JMq7xTTwaua7OjuSwDc/S3iy4W2P0fL4YtI+POZ2e7EHssUYqWpifjT\n5ZHpwFtEAn0FWOXuTS1ihNadAN+x6ARYqfh/BvwX4ABmtj2wskZiz3BgkplNNbMvp4fVwvrzEWCZ\nmd2RLpGMMbNeNRJ7S6cDY9PPyx6/rrJZnLaOdlfFKahmtjVx+Ytvuvt7tI63auN39yZ3P5hoNQ8j\nylPFqlj8ZnYisMTdZ7SIo9iYKv7dp33C3Q8DTgC+ZmZHUhvrT0/gEOAmdz8EWEPsNdVC7BuZ2ebA\nycA96UFljz+ppL8IyL3y5q7pYdVqiZntBGBmOxPlBoiYB+WMl/kcFft86QOF9wJ3ufuD6cE1E3+G\nu68GGoB/Bba1uNBfy1g2xm/RCbCPu6+g7c9VTp8ATjazV4HfA58EbgD61kDsG7n7m+nHpUR5cBi1\nsf68ASx092fTr+8jNgK1EHuu44Hn3H1Z+nXZ408q6W/s4GVmdUQdanxCyy6G0XzLOR44N/38XODB\nnOFnw8aeyqvSu2KTgOPSZxP0A45LD0vC7cAL7n5DzrCaiN/M+mfOTjCzrdLLfQF4jOjkB9HpLzf+\nc9LPczsBjgfOSJ8h8xFgCPBMOWN39yvcfTd3/yixPj/q7l+ohdgzzKxXei8RM+tN1JZnUQPrT3q5\nC81sr/SgY4HZtRB7C2cSjYaM8sef4MGKkcTZJS8Blyd5oKRAXGOJI+drgQXAecQR8YfT8U4Gts0Z\n/0biDIvngUNyhp+b/mwvAmcnFPsngA3E2VDTgWnp73m7Gol//3TMM4CZwH+nh3+E6N39InE2zObp\n4VsAd6fjnALsnjOv76Y/1xzg0wmvQ0eTPZBbM7GnY82sO7My/5c1tP4cSDQoZwB/JM5gqYnY08vt\nRRz43yZnWNnjV+csEZFuRAdyRUS6ESV9EZFuRElfRKQbUdIXEelGlPRFRLoRJX0RkW5ESV9EpBtR\n0hcR6Ub+PzXcfKlYCf52AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5538b54050>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get approxiamte on and off times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "132"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liston=[i for i in range(len(M)) if M[i]>Mav*0.7]\n",
    "liston[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model for fitting onset and offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def model(x,a,b,c,d):\n",
    "    if x<a:\n",
    "        return b\n",
    "    elif x<c:\n",
    "        return b+(x-a)*d\n",
    "    else:\n",
    "        return (c-a)*d+b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model onset and find precise onset time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Ms=M[range(liston[0]-8,liston[0]+8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def Sq(X):\n",
    "    return sum([(model(i,X[0],X[1],X[2],X[3])-Ms[i])**2 for i in range(len(Ms))])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "124"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liston[0]-8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "res = scipy.optimize.minimize(Sq,x0=[7,0.3,9,0.7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "132.152585473\n"
     ]
    }
   ],
   "source": [
    "ON=liston[0]-8+res.x[2]\n",
    "print(ON)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "133\n"
     ]
    }
   ],
   "source": [
    "ONint=np.int(np.ceil(ON))\n",
    "Onint=1\n",
    "print(ONint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAEACAYAAABI5zaHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAGRNJREFUeJzt3XuQlfWd5/H3BxCNoqCgAq14ATSKIiAis8mak9uIrqNT\ncyt1d3QybmZra9VsZrLqZrNFWzu1pbPZdZJxMhlnGSqZSJgZnUnMVNwQL2ezlpdu5E5AEYxAN8KA\nCBoFgf7uH+eAx6a7z+nu55znOc/5vKq66lx+/TufAvrD07/npojAzMzyZUTaAczMLHkudzOzHHK5\nm5nlkMvdzCyHXO5mZjnkcjczy6Gq5S5pkaSdktYMMKYgaaWkdZKeTTaimZkNlqod5y7pk8C7wHcj\nYmYf748Fngd+NSK6JE2IiN11SWtmZjWpuuUeEc8BewcYcivweER0lce72M3MUpbEmvtFwBmSnpXU\nKel3E5jTzMyGYVRCc8wBPgOcArwg6YWIeC2Buc3MbAiSKPftwO6IOAAckPQz4ArguHKX5AvZmJkN\nQURoMONrXZZR+asvPwQ+KWmkpJOBq4ENAwTM/NfChQtTz+CcztmsGZ0z+a+hqLrlLmkJUADGS9oK\nLARGl3o6HomIjZJ+AqwBjgCPRMTPh5TGzMwSUbXcI+LWGsZ8Hfh6IonMzJpYsQiFQtopfIZqnwpZ\n+JupgXMmqxlyNkNGaJ6c48YVEp+zWEx8yiGpehJToh8mRSM/z8xsIO3tpa+szymJGOQO1SSOljEz\na2nF4odb7Pff/+HrhUJ6SzQudzNrCkmtZdejiHt/b9Jb7kPhcjezppBUuWexiOvBO1TNzBKUlX3J\n3nI3s8RleQmlUj2K2OVuZrnVLEsoWSnievCyjJlZDnnL3awPW/dtZePujWnHaCqrV8Oa8v3avvc9\n2Fx+feZMuOKK4c9/ykxYtrn6uDy5ZMIlnDv23CF9r09iMuulJ3qY/mfTmTJ2CieMOCHtOHW3dy+c\nfnqyc27eDFOnJjtnK7r76ru54aIbfBKTWRKe3vI0p44+lWduewZpUD9PTam9HdrvrsOcvm1Pqrzm\nbtbLX778l/zBlX/QEsVeL3neUdksvOVuVuHNd9/kqS1PsejGRWlHqatmPMTQBsflblZh8crF/Nal\nv8XYk8amHaVPzXKIoaXPyzJmFZasW8Ids+9IO0a/snI5Wcs+l7tZ2f6D+3l97+vMnTw37SgN5SWU\nfPKyjFnZy90vM2viLE4Yma3DH70+bkPhcjcr6+jqYF7bvLRjHMfr4zYUVZdlJC2StFPSmirjrpJ0\nSNJvJBfPrHE6urNZ7mZDUcua+2Lg2oEGSBoBPAD8JIlQZmmox5Z70jtAvYRitapa7hHxHLC3yrC7\ngMeAXUmEMmu07ne6ef/Q+1ww7oJE53W5W1qGfbSMpMnAr0fEXwA+pc+aUmdXJ1NPuspnpVpuJLFD\n9U+Beyue+6fDmk5HVwcnvZXMkkwWb5ZsrSeJcp8LLFVpk2cCcJ2kQxHxRF+D2yt29RcKBQr+124Z\n0NHdQRv/MZG5fHSLDVexWKQ4zDW9mi75K+l84EcRcXmVcYvL4/6hn/d9yV/LlGIRni328CBncPDr\nr7LwK2cByW1lt7e73G346nLJX0lLgAIwXtJWYCEwGoiIeKTXcDe3NZVCASZdtonvPno6t3/lLN/G\nzXKjarlHxK21ThYRvz+8OGaNd+wQyGrHhA2By93S4jNUreV1dHUwb/I8rpyQdhKz5PjCYdbyjp6Z\n6q1syxOXu7W0g4cPsnbnWuZMmpN2FLNEudytpa3ZuYbp46dzyuhT0o5iliiXu7W0o+vtZnnjcreW\n5itBWl653K2lZfUa7mbD5XK3lrXvwD627dvGjLNmpB3FLHEud2tZy7uXM3vSbEaN8Okelj8ud2tZ\n3plqeeZyt5blnamWZy53a1nemWp55nK3ltS1v4sPjnzA+ePOTzuKWV243K0lHd1q9231LK9c7taS\nvDPV8s7lbi3JO1Mt71zu1nJ6oofl3cu5qu2qtKOY1Y3L3VrOK7tfYcLJE5hwsu/OYfnlcreW40Mg\nrRVULXdJiyTtlLSmn/dvlbS6/PWcpMuTj2mWHO9MtVZQy5b7YuDaAd7fAlwTEVcAfwz8VRLBzOql\ns7vTW+6We1WvmBQRz0k6b4D3X6x4+iLQlkQws3o4ePgg6/95PbMnzU47illdJb3m/m+BJxOe0ywx\nq3eu5qLxF3HyCSenHcWsrhK71qmkTwNfAD450Lj29vZjjwuFAgXfct4ayOvt1gyKxSLFYnFYcygi\nqg8qLcv8KCJm9vP+TOBxYEFEbB5gnqjl88zq5bZ/vI1Pnfcp7phzR9pRzGomiYgY1LUyal2WUfmr\nrw+dQqnYf3egYjfLAh8Gaa2i6rKMpCVAARgvaSuwEBgNREQ8AvxX4AzgWypdhelQRPinxzLn7QNv\n0/VOF5eeeWnaUczqrpajZW6t8v4XgS8mlsisTpZ3L2fOpDmMHDEy7ShmdeczVK1leGeqtRKXu7UM\nr7dbK3G5W0uICF7qesnlbi3D5W4toeudLnqihyljp6QdxawhXO7WEnxbPWs1LndrCd6Zaq3G5W4t\nwTtTrdW43C33jvQc8W31rOW43C33XtnzCmePOZszPnZG2lHMGsblbrnnJRlrRS53yz3vTLVW5HK3\n3POWu7Uil7vl2oHDB9iwewOzJs5KO4pZQ7ncLddWvbmKi8dfzMdO+FjaUcwayuVuueYlGWtVLnfL\nNZe7tSqXu+Way91alcvdcuut999ix7s7uGTCJWlHMWs4l7vl1vLu5Vw56UrfVs9aUtVyl7RI0k5J\nawYY801JmyStkuRjziwTvCRjrayWLffFwLX9vSnpOmBqREwH/h3w7YSymQ2Ly91aWdVyj4jngL0D\nDLkJ+G557EvAWElnJxPPbGgiwuVuLS2JNfc2YFvF867ya2ap2ba/9E/y3NPOTTmJWTpGNfoD29vb\njz0uFAoUCoVGR7AW4NvqWTMrFosUi8VhzaGIqD5IOg/4UUTM7OO9bwPPRsTflp9vBD4VETv7GBu1\nfJ7ZcN3z03s47cTT+No1X0s7itmwSSIiBrWlUuuyjMpffXkCuK0cYD7wdl/FbtZIXm+3Vld1WUbS\nEqAAjJe0FVgIjAYiIh6JiB9Lul7Sa8AvgS/UM7BZNUd6jvDyjpeZO3lu2lHMUlO13CPi1hrG3JlM\nHLPh27B7A5PGTPJt9ayl+QxVyx0vyZi53C2HXO5mLnfLIZe7mcvdcub9Q++zcfdG31bPWp7L3XJl\n5ZsrufTMSzlp1ElpRzFLlcvdcsVLMmYlLnfLFZe7WYnL3XLF5W5W4nK33Njz3h52/XIXF4+/OO0o\nZqlzuVtudHZ3MnfyXN9WzwyXu+WIl2TMPuRyt9xwuZt9yOVuueDb6pl9lMvdcmHrvq2MGjGKtlN9\nh0czcLlbTvi2emYf5XK3XPCSjNlHudwtFzq6Xe5mlVzu1vQO9xxmxY4Vvq2eWQWXuzW9Df+8gbZT\n2xh30ri0o5hlRk3lLmmBpI2SXpV0bx/vnyvpGUkrJK2SdF3yUc365vV2s+NVLXdJI4CHgWuBGcAt\nkj7ea9jXgL+NiDnALcC3kg5q1h+Xu9nxatlynwdsiog3IuIQsBS4qdeYHuC08uNxQFdyEc0G5p2p\nZscbVcOYNmBbxfPtlAq/0v3AMkl3AycDn0smntnA3jv0Hq/ueZUrzr4i7ShmmVJLudfiFmBxRDwk\naT7wPUpLOMdpb28/9rhQKFAoFBKKYK1o5Y6VzDhzBieOOjHtKGaJKRaLFIvFYc2hiBh4QKms2yNi\nQfn5fUBExIMVY9YB10ZEV/n5ZuDqiNjda66o9nlmg/HQCw+xee9mHr7+4bSjmNWNJCJiUKdf17Lm\n3glMk3SepNHAzcATvca8QXkpRtIlwIm9i92sHrzebta3quUeEUeAO4FlwHpgaURskHS/pBvKw74C\nfFHSKuBR4PZ6BTar5CNlzPpWdVkm0Q/zsowlaPd7u5n2zWm8de9bjJDPx7P8qteyjFkmdXaVbqvn\nYjc7nn8qrGl5Scasfy53a1remWrWP5e7NSXfVs9sYC53a0q/ePsXjB45msmnTk47ilkmudytKXmr\n3WxgLndrSh1dHcyb7HI364/L3ZqSd6aaDczlbk3ncM9hVu5Y6dvqmQ3A5W5NZ/2u9Zw79lzGnjQ2\n7ShmmeVyt6bT0dXBlJFekjEbiMvdmk5HVwcj33S5mw3E5W5Np6O7g7bjbgZmZpWSuhOTWd0Vi7Cs\n+Et+zibW/PFM2sqvFwqlLzP7kMvdmkahACMvWMHTP72c6752IhV3bDSzXrwsY03FJy+Z1cblbk3l\n6MlLXoYxG5jL3ZrK0WvKuNzNBuZyt6ax65e72Pv+XqaPn552FLPMq6ncJS2QtFHSq5Lu7WfM70ha\nL2mtpO8lG9OsdFu9q9qu8m31zGpQ9WgZSSOAh4HPAt1Ap6QfRsTGijHTgHuBX4mI/ZIm1CuwtS7v\nTDWrXS2bQPOATRHxRkQcApYCN/Ua80XgzyNiP0BE7E42ppmvBGk2GLWUexuwreL59vJrlS4CLpb0\nnKTnJV2bVEAz8G31zAYrqZOYRgHTgGuAKcDPJF12dEu+UnvFmSeFQoGCD3uwGmzZu4WTTziZSadO\nSjuKWd0Vi0WKxeKw5lBEDDxAmg+0R8SC8vP7gIiIByvG/AXwYkR8p/z8KeDeiHi511xR7fPM+vL9\ntd/nsQ2P8fjvPJ52FLOGk0REaDDfU8uyTCcwTdJ5kkYDNwNP9BrzA+DT5RATgOnAlsEEMRuId6aa\nDU7Vco+II8CdwDJgPbA0IjZIul/SDeUxPwH2SFoPPA18JSL21jG3tRjvTDUbnKrLMol+mJdlbAgO\nHTnEuAfHseOPdnDaiaelHces4eq1LGOWqnW71nH+uPNd7GaD4HK3zPMhkGaD53K3zPPOVLPBc7lb\n5nlnqtngudwt0945+A5b9m7h8rMvTzuKWVNxuVumrdixgplnz2T0yNFpRzFrKi53y7TO7k6vt5sN\ngcvdMs1HypgNjcvdMs3lbjY0LnfLrJ3v7mT/wf1MO2Na2lHMmo7L3TKrs7t0Wz1pUGddmxkud8sw\nn7xkNnQud8ssr7ebDZ3L3TLp6G31rmq7Ku0oZk3J5W6ZtHnvZk498VQmjpmYdhSzpuRyt0zykozZ\n8LjcLZO8M9VseFzulknecjcbHpe7Zc6hI4dYvXM1V06+Mu0oZk2rpnKXtEDSRkmvSrp3gHG/KalH\n0pzkIlqrWbtrLReefiFjRo9JO4pZ06pa7pJGAA8D1wIzgFskfbyPcWOAu4EXkw5prcXr7WbDV8uW\n+zxgU0S8ERGHgKXATX2M+2/AA8DBBPNZC/J6u9nw1VLubcC2iufby68dI2k2cE5EPJlgNmtRLnez\n4Rs13AlUuqrT/wJur3y5v/Ht7e3HHhcKBQqFwnAjWI68c/AdXn/7dS4767K0o5ilplgsUiwWhzWH\nImLgAdJ8oD0iFpSf3wdERDxYfn4a8BrwLqVSnwjsAW6MiBW95opqn2etrfiLIl99+qs8f8fzaUcx\nywxJRMSgLo9ay5Z7JzBN0nnADuBm4Jajb0bEfuCsihDPAn8YESsHE8QMvCRjlpSqa+4RcQS4E1gG\nrAeWRsQGSfdLuqGvb2GAZRmzgbjczZJRdVkm0Q/zsoxVMeWhKTxz+zO++5JZhaEsy/gMVcuMHe/s\n4N0P3mXq6VPTjmLW9Fzulhmd3Z3Ma5vn2+qZJcDlbpnh9Xaz5LjcLTNc7mbJcblbJvRED53dnVw1\n2bfVM0uCy90y4bW3XmPsiWM5e8zZaUcxywWXu2WCl2TMkuVyt0xwuZsly+VumeByN0uWy91S98GR\nD1i7ay1zJvkGXmZJcblb6tbsXMPU06f6tnpmCXK5W+q8JGOWPJe7pc7lbpY8l7ulzuVuljyXu6Vq\n34F9bN23lRlnzkg7ilmuuNwtVS/veJlZE2dxwsgT0o5ilisud0uVl2TM6sPlbqlyuZvVh8vdUuVy\nN6uPmspd0gJJGyW9KunePt7/sqT1klZJ+qmkc5OPannTtb+LA4cPcMG4C9KOYpY7Vctd0gjgYeBa\nYAZwi6SP9xq2ArgyImYBjwP/I+mglj++rZ5Z/dSy5T4P2BQRb0TEIWApcFPlgIj4vxFxoPz0RaAt\n2ZiWR16SMaufWsq9DdhW8Xw7A5f3HcCTwwllrcHlblY/o5KcTNK/Aa4EPtXfmPb29mOPC4UChUIh\nyQjWJHqih+Xdy31bPbM+FItFisXisOZQRAw8QJoPtEfEgvLz+4CIiAd7jfsc8A3gmojY089cUe3z\nrDVs3L2R6x+9ni1f2pJ2FLPMk0REDGrnVC3LMp3ANEnnSRoN3Aw80euDZwPfBm7sr9jNKnlJxqy+\nqpZ7RBwB7gSWAeuBpRGxQdL9km4oD/sT4BTg7yWtlPSDuiW2XHC5m9VXTWvuEfF/gIt7vbaw4vHn\nE85lOdfZ3cnNl92cdgyz3PIZqtZwBw8fZN2udcyeODvtKGa55XK3hluzcw3Tz5jOKaNPSTuKWW65\n3K3hvN5uVn8ud2u4jm6Xu1m9udyt4bzlblZ/LndrqH0H9rF9/3YuPfPStKOY5ZrL3RpqefdyZk+c\nzagRiV75wsx6cblbQ72w/QUvyZg1QNOX+zCvreM5Gzjn1n1b+eZL3+TWy29N/kPM7CNc7p6zIXMe\n6TnCbf94G1+e/2XmTJqT/IeY2Uc0fOHzrh/fleh8LwF7fpzolJ6zDnOu+rvSLQHu+cQ9yU5uZn1q\neLm/1nERANOnw/RpQ5tj02uwaVPpceeTML78uufM7pzXcTFz+W3+389G4kv4m9Vfw8v9yfYEttyv\n/vBhO1Bx/w/Pmec5zaxmTb/mbmZmx2v6cq/Hr/ieM/tzmtnAqt5mL9EP8232zMwGrV632TMzsybj\ncjczy6Gayl3SAkkbJb0q6d4+3h8taamkTZJekDQl+ahmZlarquUuaQTwMHAtMAO4RdLHew27A3gr\nIqYDf0rphtlNq1iP0zTrwDmT1Qw5myEjOGcW1LLlPg/YFBFvRMQhYClwU68xNwHfKT9+DPhschEb\nr1n+wp0zWc2QsxkygnNmQS3l3gZsq3i+vfxan2Mi4gjwtqQzEkloZmaDVq8dqoM6ZMfMzJJV9Th3\nSfOB9ohYUH5+HxAR8WDFmCfLY16SNBLYERFn9TGXD3I3MxuCwR7nXsu1ZTqBaZLOA3YANwO39Brz\nI+B2ShcA/G3gmSTCmZnZ0FQt94g4IulOYBmlZZxFEbFB0v1AZ0T8E7AI+BtJm4A9lP4DMDOzlDT0\n8gNmZtYYDTtDtdqJUFkg6RxJz0haL2mtpLvTztQfSSMkrZD0RNpZ+iNprKS/l7Sh/Gd6dfXvajxJ\nX5a0TtIaSY9KGp12JgBJiyTtlLSm4rXTJS2T9Iqkn0gam2bGcqa+cv5J+e99laTHJZ2WZsZypuNy\nVrz3R5J6snCUX385Jd1V/jNdK+mBavM0pNxrPBEqCw4DfxgRM4BfAf5DRnMCfAn4edohqvgG8OOI\nuAS4AtiQcp7jSJoM3AXMiYiZlJYqs7KsuJjSz0yl+4CnIuJiSvu2/nPDUx2vr5zLgBkRMQvYRHZz\nIukc4PPAGw1P1LfjckoqAL8GXB4RlwNfrzZJo7bcazkRKnUR8WZErCo/fpdSGfU+pj915X+M1wP/\nO+0s/Slvqf3LiFgMEBGHI2J/yrH6MxI4RdIo4GSgO+U8AETEc8DeXi9XnjD4HeDXGxqqD33ljIin\nIqKn/PRF4JyGB+ulnz9PgIeA/9TgOP3qJ+e/Bx6IiMPlMburzdOocq/lRKhMkXQ+MIvSEUBZc/Qf\nY5Z3mFwA7Ja0uLx89Iikj6UdqreI6Ab+J7AV6ALejoin0k01oLMiYieUNkaA4w45zqDfB55MO0Rf\nJN0IbIuItWlnqeIi4BpJL0p6VtLcat/gq0L2QdIYSpdR+FJ5Cz4zJP0rYGf5NwyR3RPGRgFzgD+P\niDnAe5SWFDJF0jhKW8PnAZOBMZJuTTfVoGT5P3gk/RfgUEQsSTtLb+WNja8CCytfTilONaOA0yNi\nPnAP8HfVvqFR5d4FVF4p8pzya5lT/tX8MeBvIuKHaefpwyeAGyVtAb4PfFrSd1PO1JftlLaIlpef\nP0ap7LPmc8CWiHirfOmMfwD+RcqZBrJT0tkAkiYCu1LO0y9Jv0dp+TCr/1lOBc4HVkt6nVIvvSwp\ni78NbaP0b5OI6AR6JI0f6BsaVe7HToQqH4lwM5DVozz+Gvh5RHwj7SB9iYivRsSUiLiQ0p/jMxFx\nW9q5eisvHWyTdFH5pc+SzR3AW4H5kk6SJEo5s7Tjt/dvZ08Av1d+fDuQlQ2Qj+SUtIDS0uGNEXEw\ntVTHO5YzItZFxMSIuDAiLqC0QTI7IrLwH2bvv/cfAJ8BKP9MnRARewaaoCHlXt4iOnoi1HpgaURk\n6QcIAEmfAP418BlJK8trxQvSztXE7gYelbSK0tEy/z3lPMeJiA5Kv1WsBFZT+oF6JNVQZZKWAM8D\nF0naKukLwAPA5yW9Quk/oqqHxNVbPzn/DBgD/LT8c/StVEPSb85KQQaWZfrJ+dfAhZLWAkuAqht0\nPonJzCyHvEPVzCyHXO5mZjnkcjczyyGXu5lZDrnczcxyyOVuZpZDLnczsxxyuZuZ5dD/B6f+R0SE\nGEFXAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4152ed6f10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.squeeze(M[range(liston[0]-8,liston[0]+8)]),'+')\n",
    "plt.plot(np.arange(0,len(Ms),0.1),[model(i,res.x[0],res.x[1],res.x[2],res.x[3]) for i in np.arange(0,len(Ms),0.1)])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model offset and find precise offset time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "index 6033 is out of bounds for axis 1 with size 6033",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-1681dbad9bf7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mMs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mliston\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mliston\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mliston\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mliston\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m: index 6033 is out of bounds for axis 1 with size 6033"
     ]
    }
   ],
   "source": [
    "Ms=M[range(liston[len(liston)-1]-6,liston[len(liston)-1]+6)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def Sq(X):\n",
    "    return sum([(model(i,X[0],X[1],X[2],X[3])-Ms[i])**2 for i in range(len(Ms))]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "res = scipy.optimize.minimize(Sq,x0=[7,3,9,-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "OFF=liston[len(liston)-1]-8+res.x[0]\n",
    "#OFF=liston[len(liston)-1]\n",
    "print(OFF)\n",
    "OFFint=np.int(np.floor(OFF))\n",
    "print(OFFint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.plot(np.squeeze(Ms),'+')\n",
    "plt.plot(np.arange(0,len(Ms),0.1),[model(i,res.x[0],res.x[1],res.x[2],res.x[3]) for i in np.arange(0,len(Ms),0.1)])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "OFFint=6032"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Keep only the frames for which the excitation is on and save"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "D4=np.transpose(data[:,:,:,range(ONint,(OFFint+1))],(2,1,0,3))\n",
    "nim=nib.Nifti1Image(D4,np.eye(4))\n",
    "nib.save(nim,'/home/sophie/Desktop/'+Dataname+'on.nii.gz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get times corresponding to images (exctiation light completely on : t=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeFile='/home/sophie/Downloads/Data'+''.join([Dataname[i] for i in range(3)])+'_.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/sophie/Downloads/Data945_.csv\n"
     ]
    }
   ],
   "source": [
    "print(TimeFile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Listfile = open(TimeFile, 'r')\n",
    "ListTime = [line.split('\\n')[0] for line in Listfile.readlines()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Timespl=[float(ListTime[i].split(',')[2]) for i in range(1,len(ListTime))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f553845fb10>]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nC29PZXuTz8kAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f553859d710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Timespl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "131.394043"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(Timespl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeOn=[Timespl[i] for i in range(ONint,(OFFint+1))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Tinit=(ON-ONint-1)*(Timespl[ONint]-Timespl[ONint-1])+Timespl[ONint-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeOnFinal=TimeOn-Tinit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(208, 208, 40, 5900)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D4.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sio.savemat('/home/sophie/Desktop/'+Dataname+'TimeFluoOn.mat', {'TimeFluoOn':TimeOnFinal})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11+"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
||||||| merged common ancestors
=======
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[H\u001b[2J"
     ]
    }
   ],
   "source": [
    "clear all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import nibabel as nib\n",
    "import os\n",
    "import numpy as np\n",
    "import scipy.io as sio\n",
    "import scipy.optimize\n",
    "from Tkinter import Tk\n",
    "from tkFileDialog import askdirectory\n",
    "import libtiff \n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/media/sophie/e14406b6-b6d1-4305-86e1-f0fe5128f521/100174ss1\n"
     ]
    }
   ],
   "source": [
    "Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing\n",
    "foldername = askdirectory() # show an \"Open\" dialog box and return the path to the selected file\n",
    "print(foldername)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "path=foldername"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "A=foldername.split('/')\n",
    "Dataname=A[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'100174ss1'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dataname"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Open the images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "t = libtiff.TiffFile(path+'/'+Dataname+'-00383.tif') \n",
    "tt = t.get_tiff_array() \n",
    "t.close()\n",
    "S=tt.shape\n",
    "data=np.zeros([S[0],S[1],S[2],len(os.listdir(path))])\n",
    "#for i in range(1,15000):\n",
    "for i in range(len(os.listdir(path))):       \n",
    "#for fn in os.listdir(path):\n",
    "    t = libtiff.TiffFile(path+'/'+Dataname+'-'+str(i+1).zfill(5)+'.tif') \n",
    "    #t = libtiff.TiffFile(path+fn) \n",
    "    tt = t.get_tiff_array()\n",
    "    data[:,:,:,i]=tt[:][:][:]\n",
    "    t.close()\n",
    "    #i=i+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'100174ss1-05056.tif'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Dataname+'-'+str(i+1).zfill(5)+'.tif'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36, 105, 105, 5056)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S=data.shape\n",
    "S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3890"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3507+383"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find end of onset of light and begining of offset (to align to behavior) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate average time series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "M=np.mean(np.mean(np.mean(data,0),0),0)\n",
    "Mav=M.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f9370f48d50>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nOsu9Wzf3K690X2MN9w8+yG8dhx7qfvzx7nvsEev55z9j/lNPud91V/NyjY3Nozvmz3e/4AL3ceNi\n+uCD3UeM+PK6f/EL97XWcr/6avc773Q3izJutJF7794xsmjaNPfOnd3XXTfeM3f3jz92X7q09fLe\ndZf7UUc1T3/2mfvhh7uffrr7+PHuG24YdX/zzRgtNX16jLRqbHTff/+o4/33N//+jBkx+qgtCxfG\n+9nayJYnnoj1HXtsfBa32sp9yRL3M86I/dE0smjJkva30dJ667l/+GHz9D/+Ee/xZZe5/8//uA8Z\n4n7ggVHHpv0/Zkzz8vPm5b+tE0+M0WotzZ3rvs467n37xuil/v3dt9nGferU/Nfdmj/+MUbDNZk9\nO/5Gpk+P969XL/c33ihuGxIo4eidfEN/c+CNNl7bLAn8AXmsp9UKZT30W3r4YfcNNnB//vnSrnf+\n/Bhe6u5+8skRepD/8Lt58yJE6uvjj79LlwjRHj3cN9kkwvT002Od++7r/p//uJ9ySnPYTJwYQd4U\n2LmWLo3AazJpUiy/dKn7AQe4n39+hNjJJ7ufcIL773/v/uSTzdtavtz91lvdL7ooyvbzn7sfd5z7\nOee0XZ9zzml+D8C9U6d43Hxz9z59Yvhrjx5R76bQPPnk5vfrzjtjO03TU6a4b7ll29t7660Y9rh8\nufuOO7p//esR2jvuGGV/9NE4oH31q+4PPtj+vmhsdP/oowjb9vbfokXue+0VZf/Nb9zvuScO2u5x\nYAD34cNj+qmn3J95pu11DR3q/pe/tP7a0qVx4Ab3PfeMde++e5TtttuaD/ru8bc4Z0779XN3/93v\nvjz0+Iwz3Ndc0/3UU93//Of4O3n11Y7XJe2raOgDdwOzgM+A6UQXzmnAqcnrfwQ+AF4FxgOvtLOu\nViu0++4rV+hXSmNjtJ4KsXy5+/XXu997r/uECdEK32sv97q6aLkeeaT76qtHKH34ofvFF0eQ7rRT\n+m2NHx8tfIhgGjcunm+wQUxvv7372We7f+UrcdAZPDjuAYA4ULRXh7/9rbm1O2tWHGzuvjtC3j1C\nZo89ovVaX+++ww5x9nHooXFGtuGG7r/+dSx7993u++yTX53uuCPKO3161KdTpzijufpq92efjbqN\nHBlnMscc437aaXFviHscbCC2t912HW9r0SL3K66I/bBsWbSSDz44DmiPPRbbevbZOAB16+b+17/G\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f9371438090>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(M)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get approxiamte on and off times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "114"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liston=[i for i in range(len(M)) if M[i]>Mav*0.7]\n",
    "liston[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model for fitting onset and offset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def model(x,a,b,c,d):\n",
    "    if x<a:\n",
    "        return b\n",
    "    elif x<c:\n",
    "        return b+(x-a)*d\n",
    "    else:\n",
    "        return (c-a)*d+b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model onset and find precise onset time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Ms=M[range(liston[0]-8,liston[0]+8)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def Sq(X):\n",
    "    return sum([(model(i,X[0],X[1],X[2],X[3])-Ms[i])**2 for i in range(len(Ms))])   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "106"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liston[0]-8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "res = scipy.optimize.minimize(Sq,x0=[7,0.3,9,0.7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "114.013566491\n"
     ]
    }
   ],
   "source": [
    "ON=liston[0]-8+res.x[2]\n",
    "print(ON)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "115\n"
     ]
    }
   ],
   "source": [
    "ONint=np.int(np.ceil(ON))\n",
    "Onint=1\n",
    "print(ONint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nM7MC+v/uaWo2oqZaLAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8f4adf8d50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.squeeze(M[range(liston[0]-8,liston[0]+8)]),'+')\n",
    "plt.plot(np.arange(0,len(Ms),0.1),[model(i,res.x[0],res.x[1],res.x[2],res.x[3]) for i in np.arange(0,len(Ms),0.1)])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model offset and find precise offset time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Ms=M[range(liston[len(liston)-1]-6,liston[len(liston)-1]+6)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def Sq(X):\n",
    "    return sum([(model(i,X[0],X[1],X[2],X[3])-Ms[i])**2 for i in range(len(Ms))]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "res = scipy.optimize.minimize(Sq,x0=[7,3,9,-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4984.63984102\n",
      "4984\n"
     ]
    }
   ],
   "source": [
    "OFF=liston[len(liston)-1]-8+res.x[0]\n",
    "#OFF=liston[len(liston)-1]\n",
    "print(OFF)\n",
    "OFFint=np.int(np.floor(OFF))\n",
    "print(OFFint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8f2ed73dd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.squeeze(Ms),'+')\n",
    "plt.plot(np.arange(0,len(Ms),0.1),[model(i,res.x[0],res.x[1],res.x[2],res.x[3]) for i in np.arange(0,len(Ms),0.1)])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Keep only the frames for which the excitation is on and save"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "D4=np.transpose(data[:,:,:,range(ONint,(OFFint+1))],(2,1,0,3))\n",
    "nim=nib.Nifti1Image(D4,np.eye(4))\n",
    "nib.save(nim,'/home/sophie/Desktop/'+Dataname+'on.nii.gz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get times corresponding to images (exctiation light completely on : t=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeFile='/home/sophie/Downloads/Data'+''.join([Dataname[i] for i in range(3)])+'_.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/sophie/Downloads/Data816_.csv\n"
     ]
    }
   ],
   "source": [
    "print(TimeFile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "IOError",
     "evalue": "[Errno 2] No such file or directory: '/home/sophie/Downloads/Data816_.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIOError\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-842fa942eb02>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mListfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTimeFile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mListTime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mListfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIOError\u001b[0m: [Errno 2] No such file or directory: '/home/sophie/Downloads/Data816_.csv'"
     ]
    }
   ],
   "source": [
    "Listfile = open(TimeFile, 'r')\n",
    "ListTime = [line.split('\\n')[0] for line in Listfile.readlines()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Timespl=[float(ListTime[i].split(',')[2]) for i in range(1,len(ListTime))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.plot(Timespl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "max(Timespl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeOn=[Timespl[i] for i in range(ONint+382,(OFFint+1+382))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Tinit=(ON-ONint-1)*(Timespl[ONint+382]-Timespl[ONint+382-1])+Timespl[ONint+382-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Tinit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "TimeOnFinal=TimeOn-Tinit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "D4.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sio.savemat('/home/sophie/Desktop/'+Dataname+'TimeFluoOn.mat', {'TimeFluoOn':TimeOnFinal})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
>>>>>>> 57759d29a73933bc92c6aaedf808d46b8fabe631
